package xiaomi;

import java.math.BigInteger;

/*
大数相减
描述
两个长度超出常规整形变量上限的大数相减，请避免使用各语言内置大数处理库，如 Java.math.BigInteger 等。
输入
有 N 行测试数据，每一行有两个代表整数的字符串 a 和 b，长度超过百位。规定 a>=b，a, b > 0。 测试结果可以用 linux 小工具 bc进行测试是否正确。
输出
返回表示结果整数的字符串。
输入样例
1231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739870-89513312312312378127398789513312312312378127398789513312312312378127398789513
1231231237812739878951331231231237812739878951331231231237812739878951331230000000000000000000000001-331231231237812739878951331231231
 复制样例
输出样例
1231231237812739878951331231231237812739878951331231231237812650365639018918853110413950365639018918853110413950365639018918853110413950357
1231231237812739878951331231231237812739878951331231231237812739878620099998762187260121048668768770
 */
public class Test03 {
    public static void main(String[] args) {
        String line1 = "1231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739878951331231231237812739870-89513312312312378127398789513312312312378127398789513312312312378127398789513";
        if (bigIntegerSub(line1).equals("1231231237812739878951331231231237812739878951331231231237812650365639018918853110413950365639018918853110413950365639018918853110413950357")) {
            System.out.println("计算正确");
        } else {
            System.out.println("计算错误");
        }
        String line2 = "1231231237812739878951331231231237812739878951331231231237812739878951331230000000000000000000000001-331231231237812739878951331231231";
        if (bigIntegerSub(line2).equals("1231231237812739878951331231231237812739878951331231231237812739878620099998762187260121048668768770")) {
            System.out.println("计算正确");
        } else {
            System.out.println("计算错误");
        }
    }

    public static String bigIntegerSub(String line) {
        String[] bigIntegerArr = line.split("-");
        char[] arrA = bigIntegerArr[0].toCharArray();
        char[] arrB = bigIntegerArr[1].toCharArray();
        int lenA = bigIntegerArr[0].length();
        int lenB = bigIntegerArr[1].length();
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= lenB; i++) {
            if (arrA[lenA - i] - arrB[lenB - i] >= 0) {
                sb.insert(0, arrA[lenA - i] - arrB[lenB - i]);
            } else {
                arrA[lenA - i - 1] = (char) (arrA[lenA - i - 1] - 1);
                sb.insert(0, arrA[lenA - i] + 10 - arrB[lenB - i]);
            }
        }
        for (int i = lenB + 1; i <= lenA; i++) {
            if (arrA[lenA - i] < '0') {
                arrA[lenA - i - 1] = (char) (arrA[lenA - i - 1] - 1);
                sb.insert(0, arrA[lenA - i] + 10);
            } else {
                sb.insert(0, arrA[lenA - i]);
            }
        }
        return sb.toString();
    }
}
