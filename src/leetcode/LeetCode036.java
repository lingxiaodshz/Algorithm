package leetcode;

public class LeetCode036 {
    /**
     * 36. 有效的数独
     * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
     * 数字 1-9 在每一行只能出现一次。
     * 数字 1-9 在每一列只能出现一次。
     * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
     * 上图是一个部分填充的有效的数独。
     * 数独部分空格内已填入了数字，空白格用 '.' 表示。
     * 示例 1:
     * 输入:
     * [
     *   ["5","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: true
     * 示例 2:
     * 输入:
     * [
     *   ["8","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: false
     * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
     * 说明:
     * 一个有效的数独（部分已被填充）不一定是可解的。
     * 只需要根据以上规则，验证已经填入的数字是否有效即可。
     * 给定数独序列只包含数字 1-9 和字符 '.' 。
     * 给定数独永远是 9x9 形式的。
     */

    public static void main(String[] args) {
        char[][] board = new char[][]{
                {'.', '.', '.', '.', '5', '.', '.', '1', '.'},
                {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
                {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'}
        };
        System.out.println(isValidSudoku(board));
    }

    public static boolean isValidSudoku(char[][] board) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0, len = board.length; i < len; i++) {
            char[] chars = board[i];
            sb.delete(0, sb.length());
            for (int j = 0; j < chars.length; j++) {
                if (chars[j] >= '0' && chars[j] <= '9') {
                    if (sb.indexOf(String.valueOf(chars[j])) != -1) {
                        return false;
                    } else {
                        sb.append(chars[j]);
                    }
                }
            }
        }
        for (int i = 0, len = board.length; i < len; i++) {
            sb.delete(0, sb.length());
            for (int j = 0; j < len; j++) {
                if (board[j][i] >= '0' && board[j][i] <= '9') {
                    if (sb.indexOf(String.valueOf(board[j][i])) != -1) {
                        return false;
                    } else {
                        sb.append(board[j][i]);
                    }
                }
            }
        }
        for (int i = 0, len = 3; i < len; i++) {
            for (int m = 0; m < len; m++) {
                sb.delete(0, sb.length());
                for (int j = 0 + i * 3; j < len + i * 3; j++) {
                    for (int k = 0 + m * 3; k < len + m * 3; k++) {
                        if (board[k][j] >= '0' && board[k][j] <= '9') {
                            if (sb.indexOf(String.valueOf(board[k][j])) != -1) {
                                return false;
                            } else {
                                sb.append(board[k][j]);
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
}
